#include <iostream>
#include <algorithm>

using namespace std;

struct Item {
    int weight;
    int profit;
};

bool compare(Item a, Item b) {
    double ratio1 = (double)a.profit / a.weight;
    double ratio2 = (double)b.profit / b.weight;
    return ratio1 > ratio2;
}

double fractionalKnapsack(int capacity, Item items[], int n) {
    sort(items, items + n, compare);

    double maxProfit = 0.0;
    for (int i = 0; i < n; ++i) {
        if (capacity >= items[i].weight) {
            maxProfit += items[i].profit;
            capacity -= items[i].weight;
        } else {
            maxProfit += (double)items[i].profit / items[i].weight * capacity;
            break;
        }
    }

    return maxProfit;
}

int main() {
    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    Item items[n];
    cout << "Enter weights and profits for each item:\n";
    for (int i = 0; i < n; ++i) {
        cin >> items[i].weight >> items[i].profit;
    }

    int capacity;
    cout << "Enter the knapsack capacity: ";
    cin >> capacity;

    double maxProfit = fractionalKnapsack(capacity, items, n);
    cout << "Maximum profit: " << maxProfit << endl;

    return 0;
}
